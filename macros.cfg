[delayed_gcode KINEMATIC_POSITION]
initial_duration:0.2
gcode:
	SET_KINEMATIC_POSITION X=150 Y=150 Z=150
	#SET_FILAMENT_SENSOR SENSOR=runout ENABLE=0


[gcode_macro SHAPER_CALIBRATE]
rename_existing: RESHAPER_CALIBRATE
gcode:
    RESHAPER_CALIBRATE FREQ_START=30 FREQ_END=150


[gcode_macro PRINT_START]
gcode:
	{% set BED_TEMP = params.BED_TEMP | default(60) | float %}
	M190 S{BED_TEMP}  # Start bed heating and wait before homing
	G28
	BED_MESH_PROFILE LOAD=default


[gcode_macro TOOLHEAD_PARK]
gcode:
	# Move nozzle away from print while retracting
	G91
	G1 X-2 Y-2 E-3 F600
	# Raise nozzle
	G0 Z77 F1200
	# park nozzle
	G90
	G0 F36000
	G0 X33 Y{printer.toolhead.axis_maximum.y - 33}


[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
	TOOLHEAD_PARK
	M84 #steppers off
	M104 S0 #hotend off
	CLEAR_PAUSE
	SDCARD_RESET_FILE
	SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout} #set timeout back to configured value


[gcode_macro PRINT_END]
gcode:
	TOOLHEAD_PARK
	M84 #steppers off
	# heaters off
	M104 S0
	M140 S0
	M141 S0
    #M106 P0 S0
    #M106 P2 S0
    #M106 P3 S0  #Turn off the activated carbon fan

	SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout} #set timeout back to configured value
	CLEAR_PAUSE

	BEEP I=3 DUR=500


[gcode_macro POWEROFF]
gcode:
	M107 #fans off
	M104 S0 #heaters off
	M140 S0
	M141 S0
	M84 #steppers off
	SET_PIN PIN=caselight VALUE=0
	M81 #power off


[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
	{% if printer['pause_resume'].is_paused | int == 0 %}
		#SET_FILAMENT_SENSOR SENSOR=fila ENABLE=0                                             ; disable filament sensor
		#SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume

		BASE_PAUSE                                                                           ; pause print
		TOOLHEAD_PARK

		#SAVE_GCODE_STATE NAME=PAUSEPARK2
		#SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error)
		SET_IDLE_TIMEOUT TIMEOUT=10800 #set timeout to 3 hours
#		SET_STEPPER_ENABLE STEPPER=extruder enable=0
	{% endif %}

[gcode_macro RESUME]
rename_existing: BASE_RESUME
# variable_zhop: 0
# variable_etemp: 0
gcode:
# 	# Parameters
# 	{% set e = params.E|default(2.5)|int %}                                          ; hotend prime amount (in mm)
#
	{% if printer['pause_resume'].is_paused | int == 1 %}
# 		SET_FILAMENT_SENSOR SENSOR=fila ENABLE=1                          ; enable filament sensor
# 		#INITIAL_RGB                                                                    ; reset LCD color
# 		SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  ; set timeout back to configured value
# 		{% if etemp > 0 %}
# 			M109 S{etemp|int}                                                        ; wait for hotend to heat back up
# 		{% endif %}
# 		RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=150                     ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)
# 		G91                                                                          ; relative positioning
# 		M83                                                                          ; relative extruder positioning
# 		{% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
# #           G1  E{e} F900                                                ; prime nozzle by E, lower Z back down
# #        {% else %}
# #            G1 Z{zhop * -1} F900                                                     ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
# 		{% endif %}
# 		RESTORE_GCODE_STATE NAME=PAUSEPARK2 MOVE=1 MOVE_SPEED=150
# 		RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=10                          ; restore position
		SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout} #set timeout back to configured value
		BASE_RESUME
	{% endif %}


[gcode_macro G29]
variable_k:1
gcode:
	{% if k|int==1 %}
		BED_MESH_CLEAR      #清除调平数据
#    G28
		BED_MESH_CALIBRATE PROFILE=kamp  #自动调平
	{% endif %}


[gcode_macro G30]
gcode:
	BED_MESH_CLEAR      #清除调平数据
	G28
	BED_MESH_CALIBRATE mesh_min=10,10  mesh_max=310,310  METHOD=manual #手动动调平


#[gcode_macro G30]
#    G28
#    G1 X100 Y130 Z10
#    PROBE_CALIBRATE


[gcode_macro G31]
gcode:
	SET_GCODE_VARIABLE MACRO=G29 VARIABLE=k VALUE=1


[gcode_macro G32]
gcode:
	SET_GCODE_VARIABLE MACRO=G29 VARIABLE=k VALUE=0


[gcode_macro M0]
gcode:
	PAUSE


[gcode_macro M25]
rename_existing: M9925
gcode:
	PAUSE


[gcode_macro M204]
rename_existing: M99204
gcode:
    {% if params.S is defined %}
        {% set s = params.S|float %}
    {% endif %}
    {% if params.P is defined %}
    {% if params.T is defined %}
        {% set s = [params.P|float ,params.T|float] | min %}
    {% endif %}
    {% endif %}

    SET_VELOCITY_LIMIT ACCEL={s}
    SET_VELOCITY_LIMIT ACCEL_TO_DECEL={s/2}


[gcode_macro M290]
gcode:
	SET_GCODE_OFFSET Z_ADJUST={params.Z}


[gcode_macro M303]
gcode:
    {% if params.E is defined %}
     {% if params.S is defined %}
        {% if (params.E|int)==-1 %}
         PID_CALIBRATE HEATER=heater_bed TARGET={params.S|int}
        {% endif %}
        {% if (params.E|int)==0 %}
         PID_CALIBRATE HEATER=extruder TARGET={params.S|int}
        {% endif %}
     {% endif %}
  {% endif %}


[gcode_macro M900]
gcode:
    {% if params.K is defined %}
          SET_PRESSURE_ADVANCE ADVANCE={params.K}
    {% endif %}
    {% if params.T is defined %}
       SET_PRESSURE_ADVANCE SMOOTH_TIME={params.T}
    {% endif %}


[gcode_macro M901]
gcode:
#    M104 S140
    G28
    SHAPER_CALIBRATE
    SAVE_CONFIG

# [gcode_macro M109]
# rename_existing: M99109
# gcode:
#     #Parameters
#     {% set s = params.S|float %}
#
#     M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}  ; Set hotend temp
#     {% if s != 0 %}
#         TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+1}   ; Wait for hotend temp (within 1 degree)
#     {% endif %}


[gcode_macro M1029]
gcode:
#    X_TWIST_PROFILE_LOAD NAME=default
#    X_TWIST_COMPENSATE_MESH MESH_NAME=default COMPENSATION_NAME=default
#    SAVE_CONFIG


[gcode_macro M4029]
gcode:
    BED_MESH_CLEAR
    G91
    G1 Z10 F600
    G90
    G28
    G1 X{printer.toolhead.axis_maximum.x/2 - printer.probe["x_offset"]} Y{printer.toolhead.axis_maximum.y/2 - printer.probe["y_offset"]} F7800
    G1 Z15 F600
    ABORT
    PROBE_CALIBRATE
    ABORT
    G0 Z0
